#IMPORTACIONES PARA LA CONFIGURACIÓN DE QTILE
import os
import subprocess
from libqtile import hook
from typing import List # noqa: F401
from libqtile import bar, layout, widget
from libqtile.config import Click, Drag, Group, Key, Match, Screen
from libqtile.lazy import lazy
from libqtile.utils import guess_terminal
import os.path as path


from qtile_extras.popup.toolkit import (
    PopupRelativeLayout,
    PopupImage,
    PopupText,
    PopupWidget
)




current_popup = None


def show_graphs(qtile):
    global current_popup

    # Cierra el pop-up actual si existe
    if current_popup is not None:
        current_popup.hide()
        current_popup = None
    controls = [
          PopupWidget(
            widget=widget.GroupBox(                               #Configuración de grupos de trabajo / escritorios (https://docs.qtile.org/en/stable/manual/ref/widgets.html#groupbox)
                    active="#5165e7",                           #Color de los iconos de los grupos en los que hay algo abierto
                    border_width="1",                           #Grosor del borde del grupo actual
                    disable_drag= True,                         #Impide que se puedan mover los iconos de la barra de tareas al arrastrarlos con el ratón, evita mover los iconos sin querer
                    fontsize= 20,                               #Tamaño de los iconos
                    highlight_method= "text",                   #Método de resaltamiento del grupo actual ('border', 'block', 'text', o 'line')
                    inactive="#ffffff",                         #Color de los iconos de los grupos en los que no hay nada abierto
                    margin_x= 5,
                    margin_y= 5,
                    #other_current_screen_border="#44475a",
                    #other_screen_border="#44475a",
                    #padding_x= 2,
                    #padding_y= 10,
                    this_current_screen_border="#fff421",       #Color del icono del grupo actual
                    this_screen_border="#ffffff",
                    urgent_alert_method= "text",
                    urgent_border="#ffffff",
                    padding=0,

                    #No he probado si funciona
                    #columns=3,           # Ajusta este valor según tus necesidades
                    #padding_x=5,          # Ajusta este valor según tus necesidades


            ),
        
            width=1.5,
            height=0.45,
            pos_x=0.05,
            pos_y=0.25

            #width=0.01,
            #height=0.01,
            #pos_x=0.05,
            #pos_y=0.05
        ),
    ]

    layout = PopupRelativeLayout(
        qtile,
        width=250,
        padding=0,
        height=50,
        margin=0,
        controls=controls,
        #background="000000",
        background="00000060",
        #background=None,
        initial_focus=None,
        close_on_click=True
    )

  # Guarda la referencia al nuevo pop-up
    current_popup = layout
#Close the menu after certain time (5s)
    layout.show(835, 875)
  # Close the layout after 5 seconds
    qtile.call_later(1.5, layout.hide)

 









 #Intento de botón barra de tareas



programas = {
        'firefox': 'firefox',
        'terminal': 'alacritty',
        'editor': 'code',
        'thunar': 'thunar',
        'steam':'steam',
        'tor':'Tor Browser',
        'a':'a',
        'b':'b',
        'c':'c',
        'd':'d',
        'e':'e',
        'f':'f',
        'g':'g',
        'h':'h',
        'i':'i',
        'j':'j',
        'k':'k',
    }

sex={
    'steam':'steam',
        'tor':'Tor Browser',
        'a':'a',
        'b':'b',
        'c':'c',
        'd':'d',
        'e':'e',
        'f':'f',
        'g':'g',
        'h':'h',
        'i':'i',
        'j':'j',
        'k':'k',
}

def show_program_menu(qtile, program_list):
    menu_options = "\n".join(program_list.keys())
    rofi_command = "rofi -theme+window+width 18% -dmenu -p 'Selecciona un programa' -lines {0} -location 1 -yoffset 46".format(len(program_list))
    rofi_process = subprocess.Popen(rofi_command, shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
    selected_program = rofi_process.communicate(input=menu_options.encode())[0].decode().strip()
    if selected_program in program_list:
        programa_path = program_list[selected_program]
        qtile.cmd_spawn(programa_path)

'''

dispositivo_red = "enp0s3"
mod = "mod4"
terminal = guess_terminal()
color_barra = "#8D63A5"
tamaño_barra = 24
tamaño_iconos = 21
fuente_predeterminada = "Go Mono Nerd Font"
tamaño_fuente = 15
color_activo = "#77C369"
color_inactivo = "#CE1C2A"
color_fg = "#77C369"
color_oscuro = "#7851a9"
color_claro = "#8D6EA5"
color_urgent = "#f7262b"
color_bg = "#8D63A5" #morado
color_texto1 = "#8D63A5"
color_actualizaciones = "#F66E25" #naranja
color_grupo1 = "#77C369" #verde
color_grupo2 = "#CE1C2A" #rojo



def fc_separacion():
    return widget.Sep(
                    linewidth = 0,
                    padding = 5,
                    foreground = color_fg,
                    background = color_bg
                )

#funcion dibujar rectángulo
def fc_rectangulo(vColor,tipo):
    if tipo == 0:
        icono = "" #nf-fa-angle_double_left (0)
    else:
        icono = "" #nf-fa-angle_double_right (1)
    return widget.TextBox(
                    text = icono,
                    fontsize = tamaño_barra,
                    foreground = vColor,
                    background = color_bg
                )

#funcion para escribir un texto o un icono
def fc_icono_grupo1(icono,color_grupo):
    return widget.TextBox(
        text = icono,
        foreground = color_grupo1,
        background = color_bg,
        fontsize = tamaño_iconos
    )

def fc_icono_grupo2(icono,color_grupo):
    return widget.TextBox(
        text = icono,
        foreground = color_grupo2,
        background = color_bg,
        fontsize = tamaño_iconos
    )
'''












#DEFINICIÓN DE VARIABLES
mod = "mod4"





#DEFINICIÓN DE FUENTES


screenshot_command = "sh -c 'scrot --select --line mode=edge /tmp/screenshot.png && xclip -selection clipboard -t image/png -i /tmp/screenshot.png && echo /tmp/screenshot.png >> /home/Adrian/.cache/greenclip.history'"
#borrar_foto = "mv /tmp/screenshot.png /tmp/screeshot_antigua.png"
borrar_foto = "rm -f /tmp/screenshot.png"

#DEFINICIÓN DE FUNCIONES
def widget_separador():
    return widget.Sep(
    linewidth=0,
    padding= 6,
    foreground="#ffffff",
    background="#ffffff",
)









#ATAJOS DE TECLADO
keys = [
    #Moverse entre ventanas
    Key([mod], "Left", lazy.layout.left(), desc="Move focus to left"),
    Key([mod], "Right", lazy.layout.right(), desc="Move focus to right"),
    Key([mod], "Down", lazy.layout.down(), desc="Move focus down"),
    Key([mod], "Up", lazy.layout.up(), desc="Move focus up"),
    Key([mod], "Tab", lazy.layout.next(), desc="Move window focus to other window"),

    #Mover ventanas
    Key([mod, "shift"], "Left", lazy.layout.shuffle_left(), desc="Move window to the left"),
    Key([mod, "shift"], "Right", lazy.layout.shuffle_right(), desc="Move window to the right"),
    Key([mod, "shift"], "Down", lazy.layout.shuffle_down(), desc="Move window down"),
    Key([mod, "shift"], "Up", lazy.layout.shuffle_up(), desc="Move window up"),

    #Cambiar tamaño ventanas
    Key([mod, "control"], "Left", lazy.layout.grow_left(), desc="Grow window to the left"),
    Key([mod, "control"], "Right", lazy.layout.grow_right(), desc="Grow window to the right"),
    Key([mod, "control"], "Down", lazy.layout.grow_down(), desc="Grow window down"),
    Key([mod, "control"], "Up", lazy.layout.grow_up(), desc="Grow window up"),
    Key([mod], "n", lazy.layout.normalize(), desc="Reset all window sizes"),

    #Reiniar/cerrar sesión qtile
    Key([mod, "control"], "r", lazy.reload_config(), desc="Reload the config"),
    Key([mod, "control"], "q", lazy.shutdown(), desc="Shutdown Qtile"),

    #Varios
    Key([mod], "l", lazy.next_layout(), desc="Toggle between layouts"),
    Key([mod], "q", lazy.window.kill(), desc="Kill focused window"),
    Key([mod, "shift"], "f", lazy.window.toggle_fullscreen(), desc="Toggle fullscreen on the focused window"),
    Key([mod], "t", lazy.window.toggle_floating(), desc="Toggle floating on the focused window"),
    Key([mod], "r", lazy.spawncmd(), desc="Spawn a command using a prompt widget"),
    Key([mod, "shift"], "Return", lazy.layout.toggle_split(), desc="Toggle between split and unsplit sides of stack",),

    # Teclas de volumen
    Key([], "XF86AudioLowerVolume", lazy.spawn("pamixer --decrease 2")),
    Key([], "XF86AudioRaiseVolume", lazy.spawn("pamixer --increase 2")),
    Key([], "XF86AudioMute", lazy.spawn("pamixer --toggle-mute")),

    #Lanzar aplicaciones
    Key([mod], "Return", lazy.spawn("kitty"), desc="Launch terminal"),
    Key([mod], "f", lazy.spawn("firefox"), desc="Launch Firefox"),
    Key([mod], "m", lazy.spawn("rofi -show drun"), desc="Launch rofi"),
    Key([mod], "c", lazy.spawn("code"), desc="Launch VSCode"),
    Key([mod], "v", lazy.spawn("virtualbox"), desc="Launch VirtualBox"),
    Key([mod], "s", lazy.spawn("steam"), desc="Launch Steam"),
    Key([mod], "t", lazy.spawn("tor-browser"), desc="Launch Tor"),
    Key([mod], "a", lazy.spawn("azure"), desc="Launch Azure"),
    Key([mod], "d", lazy.spawn("discord"), desc="Launch Azure"),
    Key([mod], "p", lazy.spawn("Screeshot"), desc="Launch Azure"),


    #Configuración Scrot
    Key([], "Print", lazy.spawn("scrot /home/Adrian/Screenshots/%d-%m-%Y-%T-screenshot.png")),
    Key([mod, "shift"], "Print", lazy.spawn("scrot --focused --border /home/Adrian/Screenshots/%d-%m-%Y-%T-screenshot.png")), 
    Key([mod], "g", lazy.spawn("rofi -modi 'clipboard:greenclip print' -show clipboard -run-command '{cmd}'"), desc="Launch rofi"),
    Key([mod, "shift"], "s", lazy.spawn("/home/Adrian/.config/qtile/scripts/captura_pantalla.sh")),
 
    #Lanzar popup grupos de trabajo
    Key([mod], "Tab", lazy.function(show_graphs)),
 ]


#GRUPOS DE TRABAJO / ESCRITORIOS

groups = []
group_names = ["1", "2", "3", "4", "5", "6", "7", "8", "9",]

#group_labels = ["1", "2", "3", "4", "5", "6", "7", "8", "9",]
#group_labels = ["DEV", "WWW", "SYS", "DOC", "VBOX", "CHAT", "MUS", "VID", "GFX",]
group_labels = ["󰣇", "󰮯", "\uf444", "\uf444", "󰊠", "\uf444", "\uf444", "\uf444", "󰊠",]


group_layouts = ["Columns", "Columns", "Columns", "Columns", "Columns", "Columns", "Columns", "Columns", "Columns"]


def switch_to_group_with_popup(qtile, group_name):
    qtile.cmd_spawn(f"xdotool key {mod}+{group_name}")
    show_graphs(qtile)

for i in range(len(group_names)):
    groups.append(
        Group(
            name=group_names[i],
            layout=group_layouts[i].lower(),
            label=group_labels[i],
        ))
 
for i in groups:
    keys.extend(
        [
            # mod1 + letter of group = switch to group
            Key(
                [mod],
                i.name,
                lazy.group[i.name].toscreen(),
                lazy.function(switch_to_group_with_popup, i.name),
                desc="Switch to group {}".format(i.name),
            ),
            # mod1 + shift + letter of group = move focused window to group
            Key(
                [mod, "shift"],
                i.name,
                lazy.window.togroup(i.name, switch_group=False),
                desc="Move focused window to group {}".format(i.name),
            ),
        ]
    )

#DISEÑOS DE VENTANAS / LAYOUTS
layouts = [
    layout.Columns(border_focus="#e3dac9", border_width=2, margin=3),
    layout.Max(),
    # Try more layouts by unleashing below layouts.
    # layout.Stack(num_stacks=2),
     #layout.Bsp(border_focus="#e3dac9", border_width=2, margin=6),
    # layout.Matrix(),
    # layout.MonadTall(),
    # layout.MonadWide(),
    # layout.RatioTile(),
    # layout.Tile(),
    # layout.TreeTab(),
    # layout.VerticalTile(),
    # layout.Zoomy(),
]

widget_defaults = dict(
    font="Hack Regular", # change to helvetica #
    fontsize=12,
    padding=3,
)
extension_defaults = widget_defaults.copy()

"""
def init_widgets_list():
    widgets_list = [
        widget.Image(
                 filename = "~/.config/qtile/icons/logo.png",
                 scale = "False",
                 mouse_callbacks = {'Button1': lambda: qtile.cmd_spawn(myTerm)},
                 ),
        widget.Prompt(
                 font = "Ubuntu Mono",
                 fontsize=14,
                 foreground = colors[1]
        ),
        widget.GroupBox(
                 fontsize = 11,
                 margin_y = 5,
                 margin_x = 5,
                 padding_y = 0,
                 padding_x = 1,
                 borderwidth = 3,
                 active = colors[8],
                 inactive = colors[1],
                 rounded = False,
                 highlight_color = colors[2],
                 highlight_method = "line",
                 this_current_screen_border = colors[7],
                 this_screen_border = colors [4],
                 other_current_screen_border = colors[7],
                 other_screen_border = colors[4],
                 ),
        widget.TextBox(
                 text = '|',
                 font = "Ubuntu Mono",
                 foreground = colors[1],
                 padding = 2,
                 fontsize = 14
                 ),
        widget.CurrentLayoutIcon(
                 # custom_icon_paths = [os.path.expanduser("~/.config/qtile/icons")],
                 foreground = colors[1],
                 padding = 4,
                 scale = 0.6
                 ),
        widget.CurrentLayout(
                 foreground = colors[1],
                 padding = 5
                 ),
        widget.TextBox(
                 text = '|',
                 font = "Ubuntu Mono",
                 foreground = colors[1],
                 padding = 2,
                 fontsize = 14
                 ),
        widget.WindowName(
                 foreground = colors[6],
                 max_chars = 40
                 ),
        widget.GenPollText(
                 update_interval = 300,
                 func = lambda: subprocess.check_output("printf $(uname -r)", shell=True, text=True),
                 foreground = colors[3],
                 fmt = '❤  {}',
                 decorations=[
                     BorderDecoration(
                         colour = colors[3],
                         border_width = [0, 0, 2, 0],
                     )
                 ],
                 ),
        widget.Spacer(length = 8),
        widget.CPU(
                 format = '▓  Cpu: {load_percent}%',
                 foreground = colors[4],
                 decorations=[
                     BorderDecoration(
                         colour = colors[4],
                         border_width = [0, 0, 2, 0],
                     )
                 ],
                 ),
        widget.Spacer(length = 8),
        widget.Memory(
                 foreground = colors[8],
                 mouse_callbacks = {'Button1': lambda: qtile.cmd_spawn(myTerm + ' -e htop')},
                 format = '{MemUsed: .0f}{mm}',
                 fmt = '🖥  Mem: {} used',
                 decorations=[
                     BorderDecoration(
                         colour = colors[8],
                         border_width = [0, 0, 2, 0],
                     )
                 ],
                 ),
        widget.Spacer(length = 8),
        widget.DF(
                 update_interval = 60,
                 foreground = colors[5],
                 mouse_callbacks = {'Button1': lambda: qtile.cmd_spawn(myTerm + ' -e df')},
                 partition = '/',
                 #format = '[{p}] {uf}{m} ({r:.0f}%)',
                 format = '{uf}{m} free',
                 fmt = '🖴  Disk: {}',
                 visible_on_warn = False,
                 decorations=[
                     BorderDecoration(
                         colour = colors[5],
                         border_width = [0, 0, 2, 0],
                     )
                 ],
                 ),
        widget.Spacer(length = 8),
        widget.Volume(
                 foreground = colors[7],
                 fmt = '🕫  Vol: {}',
                 decorations=[
                     BorderDecoration(
                         colour = colors[7],
                         border_width = [0, 0, 2, 0],
                     )
                 ],
                 ),
        widget.Spacer(length = 8),
        widget.KeyboardLayout(
                 foreground = colors[4],
                 fmt = '⌨  Kbd: {}',
                 decorations=[
                     BorderDecoration(
                         colour = colors[4],
                         border_width = [0, 0, 2, 0],
                     )
                 ],
                 ),
        widget.Spacer(length = 8),
        widget.Clock(
                 foreground = colors[8],
                 format = "⏱  %a, %b %d - %H:%M",
                 decorations=[
                     BorderDecoration(
                         colour = colors[8],
                         border_width = [0, 0, 2, 0],
                     )
                 ],
                 ),
        widget.Spacer(length = 8),
        widget.Systray(padding = 3),
        widget.Spacer(length = 8),

        ]
    return widgets_list

"""
#### Mouse Callbacks ####

#def sexmode(qtile):
#   qtile.cmd_spawn('alacritty')
screens = [
    Screen(
        
        top=bar.Bar(
            [
                #widget.CurrentLayout(),
                #widget.TextBox("I use arch BTW", font="FiraCode Bold"),
                #fc_separacion(),
                #widget_separador(),
                widget.Image(filename="~/Downloads/Icono_Arch.png", 
                            margin_x=12, 
                            margin_y=4,
                            mouse_callbacks = {
                                'Button1': lazy.function(show_program_menu, programas), 
                                'Button3': lazy.function(show_program_menu, sex)},
                            #mouse_callbacksDict of mouse button press callback functions. Accepts functions and lazy calls.),
                            scale=True,
                  #          width=20, 
                 ),
                 
                 #Idea a implementar para el icono --> Como hay una función mouse_callback, puedo hacer que al darle al icono de arch, se entre en un modo ataque o algo así que despligue dos nuevos widgets que pongan la ip de la máquina virtual que se esté usando y la ip de la máquina objetivo, al dalr de nuevo, se volvería al modo normal como un toggle
                widget.Prompt(),
                #widget.WindowName(),
                #widget.StatusNotifier(),
                widget.TextBox("", width=bar.STRETCH),
                widget.Clock(format="%d/%m/%Y %A %H:%M"),
                widget.TextBox("", width=bar.STRETCH),
                            widget.Battery(format="{percent:2.0%}"),
                widget.Systray(icon_size = 20, background_color = "#ffffff"),
                #widget.CheckUpdates(initial_text = '', fmt='<i>{}</i>'),
                #widget.Bluetooth(),
                widget.TextBox(" "),
                #widget.QuickExit(),
                #fc_icono_grupo1("  ",color_grupo1),#nf-fa-save
                #widget.Memory(
                #    foreground = color_fg,
                #    background = color_bg,
                #),
                #fc_rectangulo(color_grupo1,1),
                #fc_separacion(),
                #Fin grupo1

                #Grupo2
                #fc_rectangulo(color_grupo2,0),
                #fc_icono_grupo2("󰁪 ",color_grupo2),
                #widget.CheckUpdates(
                #    background = color_bg,
                #    colour_have_updates = color_actualizaciones,
                #    colour_no_updates = color_grupo2,
                #    no_update_string = "0",
                #    display_format = "Updates: {updates}",
                #    update_interval = 60,
                #    distro = "Arch_checkupdates"
                #),

#fc_icono_grupo2(" 󰓅 ",color_grupo2),
                #widget.Net(
                #    foreground = color_grupo2,
                #    background = color_bg,
                #    format = "{down:.0f}{down_suffix} ↓↑ {up:.0f}{up_suffix}",
                #    interface = dispositivo_red,
                #    use_bits = 'false'
                #),
                #widget.NetGraph(
                #    background = color_bg,
                #    border_color = color_grupo2,
                #    graph_color = color_grupo1,
                #    type='line', line_width=1
                #),
                #fc_rectangulo(color_grupo2,1),
                #fc_separacion(),
                #Fin grupo2

                #Grupo3
                #fc_rectangulo(color_grupo1,0),
                #widget.Clock(
                #    background = color_bg,
                #    foreground = color_grupo1,
                #    format="%d/%m/%Y %A %H:%M"
                #),
                 #fc_icono_grupo1("  ", color_grupo1),
                #widget.PulseVolume(
                #    foreground = color_fg,
                #    background = color_bg,
                #    limit_max_volume = True,
                #    fontsize = tamaño_fuente
                #),
                #fc_rectangulo(color_grupo1,1),
                #fc_separacion(),
                #Fin grupo3

                #Grupo4
                #fc_rectangulo(color_grupo2,0),
                #widget.CurrentLayoutIcon(
                #    foreground = color_grupo2,
                #    background = color_bg,
                #    scale = 0.7
                #),
                #widget.CurrentLayout(
                #    foreground = color_grupo2,
                #    background = color_bg,
                #),
                #fc_rectangulo(color_grupo2,1),
                #Fin grupo4
                       ],
            34,
            #border_width=[20, 0, 2, 0],  # Draw top and bottom borders
            #border_color=["ff00ff", "000000", "ff00ff", "000000"],  # Borders are magenta
             #background="#efffbd",
             background="#00000000",
             #background="#828579",
             margin=5,
             reserve=True,
            #opacity=0.8,  # Ajusta el valor de la opacidad según tus preferencias (0.0 a 1.0)
       
        ),
        # You can uncomment this variable if you see that on X11 floating resize/moving is laggy
        # By default we handle these events delayed to already improve performance, however your system might still be struggling
        # This variable is set to None (no cap) by default, but you can set it to 60 to indicate that you limit it to 60 events per second
        # x11_drag_polling_rate = 60,
    ),
]

# Drag floating layouts.
mouse = [
    Drag([mod], "Button1", lazy.window.set_position_floating(), start=lazy.window.get_position()),
    Drag([mod], "Button3", lazy.window.set_size_floating(), start=lazy.window.get_size()),
    Click([mod], "Button2", lazy.window.bring_to_front()),
]

dgroups_key_binder = None
dgroups_app_rules = []  # type: list
follow_mouse_focus = True
bring_front_click = False
floats_kept_above = True
cursor_warp = False
floating_layout = layout.Floating(
    float_rules=[
        # Run the utility of `xprop` to see the wm class and name of an X client.
        *layout.Floating.default_float_rules,
        Match(wm_class="confirmreset"),  # gitk
        Match(wm_class="makebranch"),  # gitk
        Match(wm_class="maketag"),  # gitk
        Match(wm_class="ssh-askpass"),  # ssh-askpass
        Match(title="branchdialog"),  # gitk
        Match(title="pinentry"),  # GPG key password entry
    ]
)
auto_fullscreen = True
focus_on_window_activation = "smart"
reconfigure_screens = True

# If things like steam games want to auto-minimize themselves when losing
# focus, should we respect this or not?
auto_minimize = True

# When using the Wayland backend, this can be used to configure input devices.
wl_input_rules = None
wmname = "LG3D"




#LLAMADA AL AUTOSTART.SH PARA CONFIGURAR CIERTAS COSAS AL ENTRAR A QTILE
@hook.subscribe.startup_once
def autostart():
    script = os.path.expanduser("~/.config/qtile/autostart.sh")
    subprocess.run([script])



